package hook

import (
	"fmt"
	"k8s.io/apimachinery/pkg/util/sets"
	"os"
	"strings"
)

const (
	injectPrefix = "# Inject Server"
)

type DNSConfig struct {
	Servers       []string
	Searches      []string
	Options       []string
	InjectServers []string
}

func NewDNSConfigFromFile(resolverConfig string) (*DNSConfig, error) {
	var hostDNS, hostSearch, hostOptions []string

	c, err := os.ReadFile(resolverConfig)
	if err != nil {
		return nil, err
	}

	hostDNS, hostSearch, hostOptions = parseResolvConf(c)
	return &DNSConfig{
		Servers:  hostDNS,
		Searches: hostSearch,
		Options:  hostOptions,
	}, nil
}

func (c *DNSConfig) Writer(resolverConfig string) error {
	dnsString := "# Generated by Coredns\n"
	for _, dns := range c.InjectServers {
		dnsString = dnsString + fmt.Sprintf("%s %s\n", injectPrefix, dns)
	}
	allDNS := append(c.InjectServers, c.Servers...)
	for _, dns := range allDNS {
		dnsString = dnsString + fmt.Sprintf("nameserver %s\n", dns)
	}
	if len(c.Searches) != 0 {
		dnsString = dnsString + "search"
		for _, search := range c.Searches {
			dnsString = dnsString + fmt.Sprintf(" %s", search)
		}
		dnsString = dnsString + "\n"
	}

	if len(c.Options) != 0 {
		dnsString = dnsString + "options"
		for _, option := range c.Options {
			dnsString = dnsString + fmt.Sprintf(" %s", option)
		}
		dnsString = dnsString + "\n"
	}

	return os.WriteFile(resolverConfig, []byte(dnsString), 0600)
}

func parseResolvConf(content []byte) ([]string, []string, []string) {

	var searches, options []string
	injectServers := sets.NewString()
	nameservers := sets.NewString()

	lines := strings.Split(string(content), "\n")
	for l := range lines {
		trimmed := strings.TrimSpace(lines[l])

		if strings.HasPrefix(trimmed, injectPrefix) {
			s := strings.TrimSpace(strings.TrimPrefix(trimmed, injectPrefix))
			if s != "" {
				injectServers.Insert(s)
			}
			continue
		}

		if strings.HasPrefix(trimmed, "#") {
			continue
		}

		fields := strings.Fields(trimmed)
		if len(fields) == 0 {
			continue
		}
		if fields[0] == "nameserver" {
			if len(fields) >= 2 && !injectServers.Has(fields[1]) {
				nameservers.Insert(fields[1])
			}
		}
		if fields[0] == "search" {
			searches = []string{}
			for _, s := range fields[1:] {
				searches = append(searches, strings.TrimSuffix(s, "."))
			}
		}
		if fields[0] == "options" {
			options = fields[1:]
		}
	}

	return nameservers.List(), searches, options
}
